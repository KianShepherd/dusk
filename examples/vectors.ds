include "vector.ds"

fn main() -> int {
    // All vectors are heap allocated and therefore need to be freed their type regardless of stored
    // value type is void*
    let mut vec: Vec<int> = Vec<int>();

    // You can append values to a vector
    vec.append(1);
    vec.append(2);
    vec.append(3);
    // Or prepend them to a vector
    vec.prepend(6);
    vec.prepend(5);
    vec.prepend(4);

    println(vec);
    print("\n");

    vec = Vec<int>();
    let mut vec2: Vec<int> = Vec<int>();
    for (let mut i: int = 0; i < 5; i = i + 1) {
        vec.append(5 - i);
        vec2.append(i + 50);
    }
    // You can also use extend to append a vector to another vector
    vec.extend(vec2);
    println(vec);
    print("\n");

    // The String struct also supports splitting its contents and casting them to a Vec<int> and Vec<float>
    let mut vec: Vec<float> = String("0.5 1.3 9.92 7.65 12.44").split<float>(" ");
    println(vec);

    let mut str: String = String("abc def ghi jkl mno pqr");
    let mut vec: Vec<String> = str.split<String>(" ");
    println(vec);

    return 0;
}
