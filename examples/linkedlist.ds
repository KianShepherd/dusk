struct LinkedList<int> {
    val: int,
    next: LinkedList<int>,
    has_next: int,

    fn LinkedList<int>(self: LinkedList<int>) -> LinkedList<int> {
        println("Init: 0");
        self.val = 0;
        self.has_next = 0;
        return self;
    }

    fn LinkedList<int>(self: LinkedList<int>, value: int) -> LinkedList<int> {
        println("Init: %d", value);
        self.val = value;
        self.has_next = 0;
        return self;
    }

    fn add_next(self: LinkedList<int>) -> LinkedList<int> {
        self.next = LinkedList<int>();
        self.has_next = 1;
        return self.next;
    }

    fn add_next(self: LinkedList<int>, value: int) -> LinkedList<int> {
        println("\n");
        self.next = LinkedList<int>(value);
        self.has_next = 1;
        return self.next;
    }

    fn get_next(self: LinkedList<int>) -> LinkedList<int> {
        let mut next: LinkedList<int> = self.next;
        return next;
    }

    fn __INCREF__(self: LinkedList<int>) {
        self._rc = self._rc + 1;
        println("inc %d: %d", self.val, self._rc);
    }

    fn __DECREF__(self: LinkedList<int>) {
        self._rc = self._rc - 1;
        println("dec %d: %d", self.val, self._rc);
        if self._rc == 0 {
            self.__del__();
        }
    }

    fn __del__(self: LinkedList<int>) {
        println("del %d", self.val);
        if self.has_next == 1 {
            self.next.__DECREF__();
        }
    }
}

fn main(argc: int, argv: string*) -> int {
    let mut a: LinkedList<int> = LinkedList<int>(1);
    let mut b: LinkedList<int> = LinkedList<int>(0);
    println("Adding");
    a.add_next(2).add_next(3).add_next(4);
    println("Added\n\n");
    let mut next: int = a.has_next;
    while (next != 0) {
        println("get val");
        println("val: %d", a.val);
        //b = a;
        println("b=a");
        a = a.get_next();
        println("get_next()");
        println("val: %d", a.val);
        println("got val");
        next = a.has_next;
        println("got next\n");
    }
    println("Done");
    return 0;
}
