struct String {
    extern new_str() -> void*;
    extern new_str_preset(text: string) -> void*;
    extern print_str(str: void*) -> string;
    extern append_str_c(str: void*, text: string);
    extern append_str_s(str: void*, text: void*);
    extern to_string(str: void*) -> string;
    extern count_substr(str: string, substr: string) -> int;
    extern split(str: string, on: string) -> string*;
    extern delete_string(str: void*);

    str: void*,

    fn String(self: String) -> String {
        self.str = new_str();
        return self;
    }

    fn String(self: String, str: string) -> String {
        self.str = new_str_preset(str);
        return self;
    }

    fn String(self: String, num: int) -> String {
        self.str = new_str();
        self = self + itos(num);
        return self;
    }

    fn String(self: String, num: float) -> String {
        self.str = new_str();
        self = self + ftos(num);
        return self;
    }

    fn __del__(self: String) {
        delete_string(self.str);
    }

    fn to_str(self: String) -> string {
        self.__INCREF__();
        return print_str(self.str);
    }

    fn __str__(self: String) -> string {
        self.__INCREF__();
        return print_str(self.str);
    }

    fn __add__(self: String, text: string) -> String {
        self = self + String(text);
        return self;
    }

    fn __add__(self: String, text: String) -> String {
        append_str_s(self.str, text.str);
        return self;
    }

    fn __add__(text: string, self: String) -> String {
        let mut res: String = String(text) + self;
        return res;
    }
}
