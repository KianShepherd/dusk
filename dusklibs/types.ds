require "bigint"

struct BigInt {
    extern new_bigint(n: int) -> void*;
    extern big_to_str(n: void*) -> string;
    extern copy_bigint(v: void*) -> void*;

    extern add_bigint(lhs: void* , rhs: void* ) -> void*;
    extern sub_bigint(lhs: void* , rhs: void* ) -> void*;
    extern mul_bigint(lhs: void* , rhs: void* ) -> void*;
    extern div_bigint(lhs: void* , rhs: void* ) -> void*; // TODO

    num: void*,

    fn BigInt(self: BigInt) -> BigInt {
        self.num = new_bigint(0);
        return self;
    }

    fn BigInt(self: BigInt, to_copy: BigInt) -> BigInt {
        self.num = copy_bigint(to_copy.num);
        return self;
    }

    fn BigInt(self: BigInt, n: int) -> BigInt {
        self.num = new_bigint(n);
        return self;
    }

    fn __str__(self: BigInt) -> string {
        return big_to_str(self.num);
    }

    fn __add__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = BigInt();
        res.num = add_bigint(self.num, rhs.num);
        return res;
    }

    fn __sub__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = BigInt();
        res.num = sub_bigint(self.num, rhs.num);
        return res;
    }

    fn __mul__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = BigInt();
        res.num = mul_bigint(self.num, rhs.num);
        return res;
    }

    fn __div__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = BigInt();
        res.num = div_bigint(self.num, rhs.num);
        return res;
    }
}

struct String {
    extern new_str() -> void*;
    extern new_str_preset(text: string) -> void*;
    extern print_str(str: void*) -> string;
    extern append_str_c(str: void*, text: string);
    extern append_str_s(str: void*, text: void*);
    extern to_string(str: void*) -> string;
    extern count_substr(str: string, substr: string) -> int;
    extern split(str: string, on: string) -> string*;

    str: void*,

    fn String(self: String) -> String {
        self.str = new_str();
        return self;
    }

    fn String(self: String, str: string) -> String {
        self.str = new_str_preset(str);
        return self;
    }

    fn String(self: String, num: int) -> String {
        self.str = new_str();
        self = self + itos(num);
        return self;
    }

    fn String(self: String, num: float) -> String {
        self.str = new_str();
        self = self + ftos(num);
        return self;
    }

    fn to_str(self: String) -> string {
        return print_str(self.str);
    }

    fn __str__(self: String) -> string {
        return print_str(self.str);
    }

    fn __add__(self: String, text: string) -> String {
        append_str_c(self.str, text);
        return self;
    }

    fn __add__(self: String, text: String) -> String {
        append_str_s(self.str, text.str);
        return self;
    }

    fn __add__(text: string, self: String) -> String {
        append_str_s(self.str, text);
        return self;
    }
}
