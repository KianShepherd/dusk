require "bignum"
require "gmp"
require "gmpxx"

struct String {
    fn String(self: String, num: BigInt) -> String {
        self.str = new_str_preset(big_to_str(num.num));
        return self;
    }

    fn String(self: String, num: BigFloat) -> String {
        self.str = new_str_preset(bigf_to_str(num.num));
        return self;
    }
}

struct BigFloat {
    extern new_bigfloat(n: float) -> void*;
    extern new_bigfloat_prec(n: float, precision: int) -> void*;
    extern bigf_to_str(n: void*) -> string;
    extern big_to_float(n: void*) -> float;
    extern copy_bigfloat(n: void*) -> void*;
    extern delete_bigfloat(n: void*);

    extern add_bigfloat(lhs: void* , rhs: void*) -> void*;
    extern sub_bigfloat(lhs: void* , rhs: void*) -> void*;
    extern mul_bigfloat(lhs: void* , rhs: void*) -> void*;
    extern div_bigfloat(lhs: void* , rhs: void*) -> void*;
    extern cmp_bigfloat(lhs: void* , rhs: void*) -> int;

    extern pow_bigfloat(b: void*, p: int) -> void*;
    extern abs_bigfloat(b: void*) -> void*;
    extern neg_bigfloat(b: void*) -> void*;

    num: void*,

    fn BigFloat(self: BigFloat) -> BigFloat {
        self.num = new_bigfloat(0.0);
        return self;
    }

    fn BigFloat(self: BigFloat, n: float) -> BigFloat {
        self.num = new_bigfloat(n);
        return self;
    }

    fn BigFloat(self: BigFloat, precision: int) -> BigFloat {
        self.num = new_bigfloat_prec(0.0, precision);
        return self;
    }

    fn BigFloat(self: BigFloat, n: float, precision: int) -> BigFloat {
        self.num = new_bigfloat_prec(n, precision);
        return self;
    }

    fn BigFloat(self: BigFloat, to_copy: BigFloat) -> BigFloat {
        self = copy_bigfloat(to_copy.num);
        return self;
    }

    fn __del__(self: BigFloat) {
        delete_bigfloat(self.num);
    }

    fn pow(self: BigFloat, n: int) -> BigFloat{
        let mut res: BigFloat = pow_bigfloat(self.num, n);
        return res;
    }

    fn pow(self: BigFloat, n: float) -> BigFloat{
        let mut res: BigFloat = pow_bigfloat(self.num, ftoi(n));
        return res;
    }

    fn pow(self: BigFloat, n: BigFloat) -> BigFloat {
        let mut res: BigFloat = pow_bigfloat(self.num, ftoi(big_to_float(n.num)));
        return res;
    }
     
    fn abs(self: BigFloat) -> BigFloat {
        let mut res: BigFloat = abs_bigfloat(self.num);
        return res;
    }

    fn neg(self: BigFloat) -> BigFloat {
        let mut res: BigFloat = neg_bigfloat(self.num);
        return res;
    }

    fn to_float(self: BigFloat) -> float {
        self.__INCREF__();
        return big_to_float(self.num);
    }

    fn to_str(self: BigFloat) -> string {
        self.__INCREF__();
        return bigf_to_str(self.num);
    }

    fn __str__(self: BigFloat) -> string {
        self.__INCREF__();
        return bigf_to_str(self.num);
    }

    fn __add__(self: BigFloat, rhs: BigFloat) -> BigFloat {
        let mut res: BigFloat = add_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __add__(rhs: float, self: BigFloat) -> BigFloat {
        return BigFloat(rhs) + self;
    }

    fn __add__(self: BigFloat, rhs: float) -> BigFloat {
        return self + BigFloat(rhs);
    }

    fn __sub__(self: BigFloat, rhs: BigFloat) -> BigFloat {
        let mut res: BigFloat = sub_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __sub__(rhs: float, self: BigFloat) -> BigFloat {
        return BigFloat(rhs) - self;
    }

    fn __sub__(self: BigFloat, rhs: float) -> BigFloat {
        return self - BigFloat(rhs);
    }

    fn __mul__(self: BigFloat, rhs: BigFloat) -> BigFloat {
        let mut res: BigFloat = mul_bigfloat(self.num, rhs.num);
        return res;
    }
  
    fn __mul__(rhs: float, self: BigFloat) -> BigFloat {
        return BigFloat(rhs) * self;
    }
  
    fn __mul__(self: BigFloat, rhs: float) -> BigFloat {
        return BigFloat(rhs) * self;
    }

    fn __div__(self: BigFloat, rhs: BigFloat) -> BigFloat {
        let mut res: BigFloat = div_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __div__(rhs: float, self: BigFloat) -> BigFloat {
        return BigFloat(rhs) / self;
    }

    fn __div__(self: BigFloat, rhs: float) -> BigFloat {
        return self / BigFloat(rhs);
    }

    fn __eq__(self: BigFloat, rhs: BigFloat) -> bool {
        let res: bool = 0 == cmp_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __eq__(rhs: float, self: BigFloat) -> bool {
        return BigFloat(rhs) == self;
    }

    fn __eq__(self: BigFloat, rhs: float) -> bool {
        return self == BigFloat(rhs);
    }

    fn __neq__(self: BigFloat, rhs: BigFloat) -> bool {
        let res: bool = 0 != cmp_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __neq__(rhs: float, self: BigFloat) -> bool {
        return BigFloat(rhs) != self;
    }

    fn __neq__(self: BigFloat, rhs: float) -> bool {
        return self != BigFloat(rhs);
    }

    fn __gt__(self: BigFloat, rhs: BigFloat) -> bool {
        let res: bool = 0 < cmp_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __gt__(rhs: float, self: BigFloat) -> bool {
        return BigFloat(rhs) > self;
    }

    fn __gt__(self: BigFloat, rhs: float) -> bool {
        return self > BigFloat(rhs);
    }

    fn __ge__(self: BigFloat, rhs: BigFloat) -> bool {
        let res: bool = 0 <= cmp_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __ge__(rhs: float, self: BigFloat) -> bool {
        return BigFloat(rhs) >= self;
    }

    fn __ge__(self: BigFloat, rhs: float) -> bool {
        return self >= BigFloat(rhs);
    }

    fn __lt__(self: BigFloat, rhs: BigFloat) -> bool {
        let res: bool = 0 > cmp_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __lt__(rhs: float, self: BigFloat) -> bool {
        return BigFloat(rhs) < self;
    }

    fn __lt__(self: BigFloat, rhs: float) -> bool {
        return self < BigFloat(rhs);
    }

    fn __le__(self: BigFloat, rhs: BigFloat) -> bool {
        let res: bool = 0 >= cmp_bigfloat(self.num, rhs.num);
        return res;
    }

    fn __le__(rhs: float, self: BigFloat) -> bool {
        return BigFloat(rhs) <= self;
    }

    fn __le__(self: BigFloat, rhs: float) -> bool {
        return self <= BigFloat(rhs);
    }
}

struct BigInt {
    extern new_bigint(n: int) -> void*;
    extern big_to_str(n: void*) -> string;
    extern big_to_long(n: void*) -> int;
    extern copy_bigint(n: void*) -> void*;

    extern add_bigint(lhs: void* , rhs: void*) -> void*;
    extern sub_bigint(lhs: void* , rhs: void*) -> void*;
    extern mul_bigint(lhs: void* , rhs: void*) -> void*;
    extern div_bigint(lhs: void* , rhs: void*) -> void*;
    extern mod_bigint(lhs: void* , rhs: void*) -> void*;
    extern cmp_bigint(lhs: void* , rhs: void*) -> int;

    extern pow_bigint(b: void*, p: int) -> void*;
    extern abs_bigint(b: void*) -> void*;
    extern neg_bigint(b: void*) -> void*;

    num: void*,

    fn BigInt(self: BigInt) -> BigInt {
        self.num = new_bigint(0);
        return self;
    }

    fn BigInt(self: BigInt, to_copy: BigInt) -> BigInt {
        self = copy_bigint(to_copy.num);
        return self;
    }

    fn BigInt(self: BigInt, n: int) -> BigInt {
        self.num = new_bigint(n);
        return self;
    }

    fn __del__(self: BigInt) {
        delete_bigint(self.num);
    }

    fn pow(self: BigInt, n: int) -> BigInt {
        let mut res: BigInt = pow_bigint(self.num, n);
        return res;
    }

    fn pow(self: BigInt, n: BigInt) -> BigInt {
        let mut res: BigInt = pow_bigint(self.num, big_to_long(n.num));
        return res;
    }
     
    fn abs(self: BigInt) -> BigInt {
        let mut res: BigInt = abs_bigint(self.num);
        return res;
    }

    fn neg(self: BigInt) -> BigInt {
        let mut res: BigInt = neg_bigint(self.num);
        return res;
    }

    fn to_int(self: BigInt) -> int {
        self.__INCREF__();
        return big_to_long(self.num);
    }

    fn to_str(self: BigInt) -> string {
        self.__INCREF__();
        return big_to_str(self.num);
    }

    fn __str__(self: BigInt) -> string {
        self.__INCREF__();
        return big_to_str(self.num);
    }

    fn __add__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = add_bigint(self.num, rhs.num);
        return res;
    }

    fn __add__(rhs: int, self: BigInt) -> BigInt {
        return BigInt(rhs) + self;
    }

    fn __add__(self: BigInt, rhs: int) -> BigInt {
        return self + BigInt(rhs);
    }

    fn __sub__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = sub_bigint(self.num, rhs.num);
        return res;
    }

    fn __sub__(rhs: int, self: BigInt) -> BigInt {
        return BigInt(rhs) - self;
    }

    fn __sub__(self: BigInt, rhs: int) -> BigInt {
        return self - BigInt(rhs);
    }

    fn __mul__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = mul_bigint(self.num, rhs.num);
        return res;
    }
  
    fn __mul__(rhs: int, self: BigInt) -> BigInt {
        return BigInt(rhs) * self;
    }
  
    fn __mul__(self: BigInt, rhs: int) -> BigInt {
        return BigInt(rhs) * self;
    }

    fn __div__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = div_bigint(self.num, rhs.num);
        return res;
    }

    fn __div__(rhs: int, self: BigInt) -> BigInt {
        return BigInt(rhs) / self;
    }

    fn __div__(self: BigInt, rhs: int) -> BigInt {
        return self / BigInt(rhs);
    }

    fn __mod__(self: BigInt, rhs: BigInt) -> BigInt {
        let mut res: BigInt = mod_bigint(self.num, rhs.num);
        return res;
    }

    fn __mod__(rhs: int, self: BigInt) -> BigInt {
        return BigInt(rhs) % self;
    }

    fn __mod__(self: BigInt, rhs: int) -> BigInt {
        return self % BigInt(rhs);
    }

    fn __eq__(self: BigInt, rhs: BigInt) -> bool {
        let res: bool = 0 == cmp_bigint(self.num, rhs.num);
        return res;
    }

    fn __eq__(rhs: int, self: BigInt) -> bool {
        return BigInt(rhs) == self;
    }

    fn __eq__(self: BigInt, rhs: int) -> bool {
        return self == BigInt(rhs);
    }

    fn __neq__(self: BigInt, rhs: BigInt) -> bool {
        let res: bool = 0 != cmp_bigint(self.num, rhs.num);
        return res;
    }

    fn __neq__(rhs: int, self: BigInt) -> bool {
        return BigInt(rhs) != self;
    }

    fn __neq__(self: BigInt, rhs: int) -> bool {
        return self != BigInt(rhs);
    }

    fn __gt__(self: BigInt, rhs: BigInt) -> bool {
        let res: bool = 0 < cmp_bigint(self.num, rhs.num);
        return res;
    }

    fn __gt__(rhs: int, self: BigInt) -> bool {
        return BigInt(rhs) > self;
    }

    fn __gt__(self: BigInt, rhs: int) -> bool {
        return self > BigInt(rhs);
    }

    fn __ge__(self: BigInt, rhs: BigInt) -> bool {
        let res: bool = 0 <= cmp_bigint(self.num, rhs.num);
        return res;
    }

    fn __ge__(rhs: int, self: BigInt) -> bool {
        return BigInt(rhs) >= self;
    }

    fn __ge__(self: BigInt, rhs: int) -> bool {
        return self >= BigInt(rhs);
    }

    fn __lt__(self: BigInt, rhs: BigInt) -> bool {
        let res: bool = 0 > cmp_bigint(self.num, rhs.num);
        return res;
    }

    fn __lt__(rhs: int, self: BigInt) -> bool {
        return BigInt(rhs) < self;
    }

    fn __lt__(self: BigInt, rhs: int) -> bool {
        return self < BigInt(rhs);
    }

    fn __le__(self: BigInt, rhs: BigInt) -> bool {
        let res: bool = 0 >= cmp_bigint(self.num, rhs.num);
        return res;
    }

    fn __le__(rhs: int, self: BigInt) -> bool {
        return BigInt(rhs) <= self;
    }

    fn __le__(self: BigInt, rhs: int) -> bool {
        return self <= BigInt(rhs);
    }
}
