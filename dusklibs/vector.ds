require "duskvec"

struct String {
    extern vec_split(str: string, on: string, vec: void*) -> int;

    fn split<int>(self: String, on: string) -> Vec<int> {
        let mut vec: Vec<int> = Vec<int>();
        let str: string = to_string(self.str);
        let count: int = count_substr(str, on) + 1;
        let split_str: string* = split(str, on);
        for (let mut i: int = 0; i < count; i++) {
            vec.append(stoi(split_str[i]));
        }
        del(split_str);
        return vec;
    }

    fn split<float>(self: String, on: string) -> Vec<float> {
        let mut vec: Vec<float> = Vec<float>();
        let str: string = to_string(self.str);
        let count: int = count_substr(str, on) + 1;
        let split_str: string* = split(str, on);
        for (let mut i: int = 0; i < count; i++) {
            vec.append(stof(split_str[i]));
        }
        del(split_str);
        return vec;
    }

    fn split<String>(self: String, on: string) -> Vec<String> {
        let mut vec: Vec<String> = Vec<String>();
        let str: string = to_string(self.str);
        vec.size = vec_split(str, on, vec.vector);
        return vec;
    }

    fn String(self: String, v: Vec<int>) -> String {
        self.str = new_str_preset(ivec_str(v.vector));
        return self;
    }
}

extern vpvec() -> void*;
extern del_vpvec(v: void*);
extern vppush_back(vec: void*, val: void*);
extern vppush_front(vec: void*, val: void*);
extern getvecvp(vec: void*, idx: int) -> void*;

template Vec<T> {
    vector: void*,
    size: int,

    fn Vec<T>(self: Vec<T>) -> Vec<T> {
        self.vector = vpvec();
        self.size = 0;
        return self;
    }

    fn __del__(self: Vec<T>) {
        //println("del Vec<String>");
        for (let mut i: int = 0; i < self.size; i++) {
            let mut str: T = getvecvp(self.vector, i);
            str.__DECREF__();
        }
        del_vpvec(self.vector);
    }
    
    fn size(self: Vec<T>) -> int {
        self.__INCREF__();
        return self.size;
    }

    fn __INCREF__(self: Vec<T>) {
        self._rc = self._rc + 1;
        //println("inc Vec<String>: %d", self._rc);
    }

    fn __DECREF__(self: Vec<T>) {
        self._rc = self._rc - 1;
        //println("dec Vec<String>: %d", self._rc);
        if self._rc == 0 {
            self.__del__();
        }
    }

    fn append(self: Vec<T>, n: T) {
        n.__INCREF__();
        vppush_back(self.vector, n);
        self.size = self.size + 1;
    }

    fn prepend(self: Vec<T>, n: T) {
        n.__INCREF__();
        vppush_front(self.vector, n);
        self.size = self.size + 1;
    }

    fn get(self: Vec<T>, idx: int) -> T {
        self.__INCREF__();
        let mut res: T = getvecvp(self.vector, idx);
        res.__INCREF__();
        return res;
    }

    fn extend(self: Vec<T>, vec: Vec<T>) {
        let size: int = vec.size();
        vec.__INCREF__();
        for (let mut i: int = 0; i < size; i++) {
            let mut str: T= vec.get(i);
            str.__INCREF__();
            vppush_back(self.vector, str);
            self.size = self.size + 1;
        }
    }

    fn to_str(self: Vec<T>) -> string {
        let mut ret: String = String("[ ");
        for (let mut i: int = 0; i < self.size; i++) {
            ret = ret + self.get(i).to_str();
            if (i < self.size - 1) {
                ret = ret + ", ";
            }
        }
        ret = ret + " ]";
        return ret.to_str();
    }

    fn __str__(self: Vec<T>) -> string {
        let mut ret: String = String("[ ");
        for (let mut i: int = 0; i < self.size; i++) {
            ret = ret + self.get(i).to_str();
            if (i < self.size - 1) {
                ret = ret + ", ";
            }
        }
        ret = ret + " ]";
        return ret.to_str();
    }

}

fn Vec<String>__str__(self: Vec<String>) -> string {
    let mut ret: String = String("[ ");
    for (let mut i: int = 0; i < self.size; i++) {
        ret = ret + "'" + String(self.get(i)) + "'";
        if (i < self.size - 1) {
            ret = ret + ", ";
        }
    }
    ret = ret + " ]";
    return ret.to_str();
}


struct Vec<int> {
    extern intvec() -> void*;
    extern del_ivec(v: void*);
    extern ipush_back(vec: void*, val: int);
    extern ipush_front(vec: void*, val: int);
    extern getveci(vec: void*, idx: int) -> int;
    extern ivec_str(vec: void*) -> string;
    extern sortveci(vec: void*);
    extern reverseveci(vec: void*);

    vector: void*,
    size: int,

    fn Vec<int>(self: Vec<int>) -> Vec<int> {
        self.vector = intvec();
        self.size = 0;
        return self;
    }

    fn __del__(self: Vec<int>) {
        //println("del Vec<int>");
        del_ivec(self.vector);
    }

    fn __INCREF__(self: Vec<int>) {
        self._rc = self._rc + 1;
        //println("inc Vec<int>: %d", self._rc);
    }
    fn __DECREF__(self: Vec<int>) {
        self._rc = self._rc - 1;
        //println("dec Vec<int>: %d", self._rc);
        if self._rc == 0 {
            self.__del__();
        }
    }
    
    fn size(self: Vec<int>) -> int {
        return self.size;
    }

    fn append(self: Vec<int>, n: int) {
        ipush_back(self.vector, n);
        self.size = self.size + 1;
    }

    fn prepend(self: Vec<int>, n: int) {
        ipush_front(self.vector, n);
        self.size = self.size + 1;
    }

    fn get(self: Vec<int>, idx: int) -> int {
        return getveci(self.vector, idx);
    }

    fn sort(self: Vec<int>) {
        sortveci(self.vector);
    }

    fn reverse(self: Vec<int>) {
        reverseveci(self.vector);
    }

    fn extend(self: Vec<int>, vec: Vec<int>) {
        for (let mut i: int = 0; i < vec.size; i++) {
            ipush_back(self.vector, vec.get(i));
            self.size = self.size + 1;
        }
    }

    fn to_str(self: Vec<int>) -> string {
        return ivec_str(self.vector);
    }

    fn __str__(self: Vec<int>) -> string {
        return ivec_str(self.vector);
    }
}

struct Vec<float> {
    extern floatvec() -> void*;
    extern del_floatvec(v: void*);
    extern fpush_back(vec: void*, val: float);
    extern fpush_front(vec: void*, val: float);
    extern getvecf(vec: void*, idx: int) -> float;
    extern fvec_str(vec: void*) -> string;
    extern sortvecf(vec: void*);
    extern reversevecf(vec: void*);

    vector: void*,
    size: int,

    fn Vec<float>(self: Vec<float>) -> Vec<float> {
        self.vector = floatvec();
        self.size = 0;
        return self;
    }

    fn __del__(self: Vec<float>) {
        //println("del Vec<float>");
        del_floatvec(self.vector);
    }

    fn __INCREF__(self: Vec<float>) {
        self._rc = self._rc + 1;
        //println("inc Vec<float>: %d", self._rc);
    }
    fn __DECREF__(self: Vec<float>) {
        self._rc = self._rc - 1;
        //println("dec Vec<float>: %d", self._rc);
        if self._rc == 0 {
            self.__del__();
        }
    }
    
    fn size(self: Vec<float>) -> int {
        return self.size;
    }

    fn append(self: Vec<float>, n: float) {
        fpush_back(self.vector, n);
        self.size = self.size + 1;
    }

    fn prepend(self: Vec<float>, n: float) {
        fpush_front(self.vector, n);
        self.size = self.size + 1;
    }

    fn get(self: Vec<float>, idx: int) -> float {
        return getvecf(self.vector, idx);
    }

    fn sort(self: Vec<float>) {
        sortvecf(self.vector);
    }

    fn reverse(self: Vec<float>) {
        reversevecf(self.vector);
    }

    fn extend(self: Vec<float>, vec: Vec<float>) {
        for (let mut i: int = 0; i < vec.size; i++) {
            fpush_back(self.vector, vec.get(i));
        }
    }
    
    fn to_str(self: Vec<float>) -> string {
        return fvec_str(self.vector);
    }

    fn __str__(self: Vec<float>) -> string {
        return fvec_str(self.vector);
    }
}
