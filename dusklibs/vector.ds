require "duskvec"

struct Vec<int> {
    extern intvec() -> void*;
    extern ipush_back(vec: void*, val: int);
    extern ipush_front(vec: void*, val: int);
    extern getveci(vec: void*, idx: int) -> int;
    extern ivec_str(vec: void*) -> string;

    vector: void*,
    size: int,

    fn Vec<int>(self: Vec<int>) -> Vec<int> {
        self.vector = intvec();
        self.size = 0;
        return self;
    }
    
    fn size(self: Vec<int>) -> int {
        return self.size;
    }

    fn append(self: Vec<int>, n: int) {
        ipush_back(self.vector, n);
        self.size = self.size + 1;
    }

    fn prepend(self: Vec<int>, n: int) {
        ipush_front(self.vector, n);
        self.size = self.size + 1;
    }

    fn get(self: Vec<int>, idx: int) -> int {
        return getveci(self.vector, idx);
    }

    fn extend(self: Vec<int>, vec: Vec<int>) {
        let size: int = vec.size();
        for (let mut i: int = 0; i < size; i++) {
            ipush_back(self.vector, vec.get(i));
        }
    }

    fn __str__(self: Vec<int>) -> string {
        return ivec_str(self.vector);
    }
}

struct Vec<float> {
    extern floatvec() -> void*;
    extern fpush_back(vec: void*, val: float);
    extern fpush_front(vec: void*, val: float);
    extern getvecf(vec: void*, idx: int) -> float;
    extern fvec_str(vec: void*) -> string;

    vector: void*,
    size: int,

    fn Vec<float>(self: Vec<float>) -> Vec<float> {
        self.vector = floatvec();
        self.size = 0;
        return self;
    }
    
    fn size(self: Vec<float>) -> int {
        return self.size;
    }

    fn append(self: Vec<float>, n: float) {
        fpush_back(self.vector, n);
        self.size = self.size + 1;
    }

    fn prepend(self: Vec<float>, n: float) {
        fpush_front(self.vector, n);
        self.size = self.size + 1;
    }

    fn get(self: Vec<float>, idx: int) -> float {
        return getvecf(self.vector, idx);
    }

    fn extend(self: Vec<float>, vec: Vec<float>) {
        let size: int = vec.size();
        for (let mut i: int = 0; i < size; i++) {
            fpush_back(self.vector, vec.get(i));
        }
    }
    
    fn __str__(self: Vec<float>) -> string {
        return fvec_str(self.vector);
    }
}
